"""
Generate Django APITestCase code from a Postman collection JSON.
Uses BASE_DIR to resolve file paths.
Run with:
    python manage.py runscript generate_postman_tests
"""

import json
import re
import os
from django.conf import settings


def sanitize_name(name):
    """Convert Postman request name to a valid Python function name"""
    name = name.lower()
    name = re.sub(r"[^0-9a-z]+", "_", name)
    if name[0].isdigit():
        name = "_" + name
    return name.strip("_")


def generate_tests(collection):
    """Generate Django APITestCase code as a string"""
    code = [
        "from rest_framework.test import APITestCase",
        "from rest_framework import status",
        "",
        "class AutoGeneratedPostmanTests(APITestCase):",
        '    base_url = "http://localhost:8000"',
        "",
    ]

    for item in collection.get("item", []):
        name = item.get("name", "unnamed_request")
        request = item.get("request", {})
        method = request.get("method", "GET").lower()
        url = request.get("url", {}).get("raw", "/")
        func_name = f"test_{sanitize_name(name)}_{method}"
        code.append(f"    def {func_name}(self):")
        code.append(f'        url = self.base_url + "{url}"')
        code.append("        headers = {'Authorization': 'Bearer YOUR_TOKEN_HERE'}")

        if method == "get":
            code.append("        response = self.client.get(url, headers=headers)")
        elif method in ["post", "patch", "delete"]:
            body = request.get("body", {}).get("raw", "{}")
            if method != "delete":
                code.append(f"        data = {body}")
            code.append(
                f"        response = self.client.{method}(url, data=data if '{method}' != 'delete' else None, format='json', headers=headers)"
            )
        else:
            code.append(f"        # Method {method} not implemented")
            code.append("        return")

        code.append(
            "        self.assertIn(response.status_code, [200, 201, 204], msg=f'Failed {url}: {response.status_code}')"
        )
        code.append("")

    return "\n".join(code)


def run(*args):
    """
    Entry point for django-extensions runscript
    Resolves Postman JSON path relative to BASE_DIR
    """
    # Default relative path inside project
    relative_path = "scripts/data/postman_collection.json"

    postman_file = os.path.join(settings.BASE_DIR, relative_path)
    output_file = os.path.join(settings.BASE_DIR, "tests/auto_generated_tests.py")

    if not os.path.exists(postman_file):
        print(f"❌ Postman collection file not found: {postman_file}")
        return

    with open(postman_file, "r") as f:
        collection = json.load(f)

    tests_code = generate_tests(collection)

    with open(output_file, "w") as f:
        f.write(tests_code)

    print(f"✅ Tests generated at {output_file}")
