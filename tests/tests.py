from rest_framework.test import APITestCase


class AutoGeneratedPostmanTests(APITestCase):
    base_url = 'http://localhost:8000'

    def test_api_token_admin_(self):
        """Auto-generated test for /api/token/"""
        response = self.client.post("/api/token/", {
    "email": "admin@gmail.com",
    "password": "password"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /api/token/"
        )
    
    def test_api_token_guidance_(self):
        """Auto-generated test for /api/token/"""
        response = self.client.post("/api/token/", {
    "email": "guidance@gmail.com",
    "password": "password"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /api/token/"
        )
    
    def test_api_token_teacher_1_(self):
        """Auto-generated test for /api/token/"""
        response = self.client.post("/api/token/", {
    "email": "teacher1@gmail.com",
    "password": "password"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /api/token/"
        )
    
    def test_api_token_teacher_2_(self):
        """Auto-generated test for /api/token/"""
        response = self.client.post("/api/token/", {
    "email": "teacher2@gmail.com",
    "password": "password"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /api/token/"
        )
    
    def test_api_token_student_(self):
        """Auto-generated test for /api/token/"""
        response = self.client.post("/api/token/", {
    "email": "bogdans3@nycstudents.net",
    "password": "password"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /api/token/"
        )
    
    def test_api_token_refresh(self):
        """Auto-generated test for /api/token/refresh/"""
        response = self.client.post("/api/token/refresh/", {
    "refresh": "{{refresh_token}}"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /api/token/refresh/"
        )
    
    def test_create_service_activity(self):
        """Auto-generated test for /profiles/service-activities/"""
        response = self.client.post("/profiles/service-activities/", {
    "title": "doing things 2",
    "supervisor": "sam kipnis 2",
    "grades": "[9, 10, 11]",
    "hours": "45"
}, format="json")
        self.assertEqual(
            response.status_code, 201,
            msg=f"Expected 201 but got {response.status_code} for /profiles/service-activities/"
        )
    
    def test_update_service_activity(self):
        """Auto-generated test for /profiles/service-activities/1/"""
        response = self.client.patch("/profiles/service-activities/1/", {
    "title": "the activity that i did and is cool",
    "supervisor": "sam kipnis",
    "grades": [
        9,
        10
    ],
    "hours": 80
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/service-activities/1/"
        )
    
    def test_delete_service_activity(self):
        """Auto-generated test for /profiles/service-activities/1/"""
        response = self.client.delete("/profiles/service-activities/1/")
        self.assertEqual(
            response.status_code, 204,
            msg=f"Expected 204 but got {response.status_code} for /profiles/service-activities/1/"
        )
    
    def test_create_event_activity(self):
        """Auto-generated test for /profiles/event-activities/"""
        response = self.client.post("/profiles/event-activities/", {
    "email": "bogdans3@nycstudents.net",
    "nfc_id": "407871a446f04c49a14114eb4762af71",
    "api_key": "api_key"
}, format="json")
        self.assertEqual(
            response.status_code, 201,
            msg=f"Expected 201 but got {response.status_code} for /profiles/event-activities/"
        )
    
    def test_get_service_profile(self):
        """Auto-generated test for /profiles/service-profiles/1/"""
        response = self.client.get("/profiles/service-profiles/1/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/service-profiles/1/"
        )
    
    def test_submit_service_profile(self):
        """Auto-generated test for /profiles/service-profiles/1/submit/"""
        response = self.client.post("/profiles/service-profiles/1/submit/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/service-profiles/1/submit/"
        )
    
    def test_unsubmit_service_profile(self):
        """Auto-generated test for /profiles/service-profiles/1/unsubmit/"""
        response = self.client.post("/profiles/service-profiles/1/unsubmit/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/service-profiles/1/unsubmit/"
        )
    
    def test_approve_service_profile(self):
        """Auto-generated test for /profiles/service-profiles/1/approve/"""
        response = self.client.post("/profiles/service-profiles/1/approve/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/service-profiles/1/approve/"
        )
    
    def test_create_leadership_activity(self):
        """Auto-generated test for /profiles/leadership-activities/"""
        response = self.client.post("/profiles/leadership-activities/", {
    "title": "doing things 2",
    "supervisor": "sam kipnis 2",
    "description": "description of things i did"
}, format="json")
        self.assertEqual(
            response.status_code, 201,
            msg=f"Expected 201 but got {response.status_code} for /profiles/leadership-activities/"
        )
    
    def test_update_leadership_activity(self):
        """Auto-generated test for /profiles/leadership-activities/1/"""
        response = self.client.patch("/profiles/leadership-activities/1/", {
    "title": "the activity that i did and is cooler",
    "supervisor": "sam kipnis",
    "description": "mmm description"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/leadership-activities/1/"
        )
    
    def test_delete_leadership_activity(self):
        """Auto-generated test for /profiles/leadership-activities/1/"""
        response = self.client.delete("/profiles/leadership-activities/1/")
        self.assertEqual(
            response.status_code, 204,
            msg=f"Expected 204 but got {response.status_code} for /profiles/leadership-activities/1/"
        )
    
    def test_get_leadership_profile(self):
        """Auto-generated test for /profiles/leadership-profiles/1/"""
        response = self.client.get("/profiles/leadership-profiles/1/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/leadership-profiles/1/"
        )
    
    def test_submit_leadership_profile(self):
        """Auto-generated test for /profiles/leadership-profiles/1/submit/"""
        response = self.client.post("/profiles/leadership-profiles/1/submit/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/leadership-profiles/1/submit/"
        )
    
    def test_unsubmit_leadership_profile(self):
        """Auto-generated test for /profiles/leadership-profiles/1/unsubmit/"""
        response = self.client.post("/profiles/leadership-profiles/1/unsubmit/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/leadership-profiles/1/unsubmit/"
        )
    
    def test_approve_leadership_profile(self):
        """Auto-generated test for /profiles/leadership-profiles/1/approve/"""
        response = self.client.post("/profiles/leadership-profiles/1/approve/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/leadership-profiles/1/approve/"
        )
    
    def test_update_personal_profile(self):
        """Auto-generated test for /profiles/personal-profiles/1/"""
        response = self.client.patch("/profiles/personal-profiles/1/", {
    "character_issues": 1,
    "notes": "good student ig"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/personal-profiles/1/"
        )
    
    def test_get_personal_profile(self):
        """Auto-generated test for /profiles/personal-profiles/1/"""
        response = self.client.get("/profiles/personal-profiles/1/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/personal-profiles/1/"
        )
    
    def test_submit_personal_profile(self):
        """Auto-generated test for /profiles/personal-profiles/1/submit/"""
        response = self.client.post("/profiles/personal-profiles/1/submit/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/personal-profiles/1/submit/"
        )
    
    def test_unsubmit_personal_profile(self):
        """Auto-generated test for /profiles/personal-profiles/1/unsubmit/"""
        response = self.client.post("/profiles/personal-profiles/1/unsubmit/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/personal-profiles/1/unsubmit/"
        )
    
    def test_approve_personal_profile(self):
        """Auto-generated test for /profiles/personal-profiles/1/approve/"""
        response = self.client.post("/profiles/personal-profiles/1/approve/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/personal-profiles/1/approve/"
        )
    
    def test_update_gpa_record(self):
        """Auto-generated test for /profiles/gpa-records/1/"""
        response = self.client.patch("/profiles/gpa-records/1/", {
    "gpa": 3.0
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /profiles/gpa-records/1/"
        )
    
    def test_student_view(self):
        """Auto-generated test for /guidance/students/1/"""
        response = self.client.get("/guidance/students/1/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/students/1/"
        )
    
    def test_multiple_students_view(self):
        """Auto-generated test for /guidance/students/multiple/?ids=[1,2,3]"""
        response = self.client.get("/guidance/students/multiple/?ids=[1,2,3]")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/students/multiple/?ids=[1,2,3]"
        )
    
    def test_all_students_view(self):
        """Auto-generated test for /guidance/students/"""
        response = self.client.get("/guidance/students/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/students/"
        )
    
    def test_filter_students_view(self):
        """Auto-generated test for /guidance/students/filter/?first_name=John"""
        response = self.client.get("/guidance/students/filter/?first_name=John")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/students/filter/?first_name=John"
        )
    
    def test_expanded_student_view(self):
        """Auto-generated test for /guidance/students/1/expanded/"""
        response = self.client.get("/guidance/students/1/expanded/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/students/1/expanded/"
        )
    
    def test_create_announcement(self):
        """Auto-generated test for /guidance/announcements/"""
        response = self.client.post("/guidance/announcements/", {
    "title": "Sample Announcement",
    "message": "This is a test message for the announcement.",
    "recipient_emails": [
        "sam.kipnis@gmail.com"
    ],
    "send_immediately": True
}, format="json")
        self.assertEqual(
            response.status_code, 201,
            msg=f"Expected 201 but got {response.status_code} for /guidance/announcements/"
        )
    
    def test_delete_announcement(self):
        """Auto-generated test for /guidance/announcements/1/"""
        response = self.client.delete("/guidance/announcements/1/", {
    "title": "Sample Announcement",
    "message": "This is a test message for the announcement.",
    "recipient_emails": [
        "sam.kipnis@gmail.com"
    ],
    "send_immediately": True
}, format="json")
        self.assertEqual(
            response.status_code, 204,
            msg=f"Expected 204 but got {response.status_code} for /guidance/announcements/1/"
        )
    
    def test_announcements(self):
        """Auto-generated test for /guidance/announcements/"""
        response = self.client.get("/guidance/announcements/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/announcements/"
        )
    
    def test_create_biographical_question(self):
        """Auto-generated test for /guidance/questions/"""
        response = self.client.post("/guidance/questions/", {
    "question_text": "this is the text of the third question",
    "answer_type": "text"
}, format="json")
        self.assertEqual(
            response.status_code, 201,
            msg=f"Expected 201 but got {response.status_code} for /guidance/questions/"
        )
    
    def test_biographical_questions(self):
        """Auto-generated test for /guidance/questions/"""
        response = self.client.get("/guidance/questions/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/questions/"
        )
    
    def test_delete_biographical_question(self):
        """Auto-generated test for /guidance/questions/1/"""
        response = self.client.delete("/guidance/questions/1/", {
    "question_text": "this is the text of the second question",
    "answer_type": "dropdown",
    "options": [
        "E",
        "F",
        "G",
        "H"
    ]
}, format="json")
        self.assertEqual(
            response.status_code, 204,
            msg=f"Expected 204 but got {response.status_code} for /guidance/questions/1/"
        )
    
    def test_submit_question_instance(self):
        """Auto-generated test for /guidance/question-instances/35/"""
        response = self.client.patch("/guidance/question-instances/35/", {
    "answer": "text answer"
}, format="json")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/question-instances/35/"
        )
    
    def test_request_recommendation(self):
        """Auto-generated test for /guidance/recommendations/"""
        response = self.client.post("/guidance/recommendations/", {
    "recommendation_type": "leadership",
    "teacher_email": "teacher1@gmail.com"
}, format="json")
        self.assertEqual(
            response.status_code, 201,
            msg=f"Expected 201 but got {response.status_code} for /guidance/recommendations/"
        )
    
    def test_approve_recommendation(self):
        """Auto-generated test for /guidance/recommendations/1/approve/"""
        response = self.client.post("/guidance/recommendations/1/approve/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/recommendations/1/approve/"
        )
    
    def test_deny_recommendation(self):
        """Auto-generated test for /guidance/recommendations/2/deny/"""
        response = self.client.post("/guidance/recommendations/2/deny/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/recommendations/2/deny/"
        )
    
    def test_teacher_dashboard(self):
        """Auto-generated test for /guidance/teacher-dashboard/355/"""
        response = self.client.get("/guidance/teacher-dashboard/355/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/teacher-dashboard/355/"
        )
    
    def test_teacher_recommendation_requests(self):
        """Auto-generated test for /guidance/teacher-recommendation-requests/"""
        response = self.client.get("/guidance/teacher-recommendation-requests/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/teacher-recommendation-requests/"
        )
    
    def test_guidance_dashboard(self):
        """Auto-generated test for /guidance/guidance-dashboard/357/"""
        response = self.client.get("/guidance/guidance-dashboard/357/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/guidance-dashboard/357/"
        )
    
    def test_guidance_submitted_profiles(self):
        """Auto-generated test for /guidance/guidance-submitted-profiles/"""
        response = self.client.get("/guidance/guidance-submitted-profiles/")
        self.assertEqual(
            response.status_code, 200,
            msg=f"Expected 200 but got {response.status_code} for /guidance/guidance-submitted-profiles/"
        )
    